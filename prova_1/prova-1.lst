gavrasm Gerd's AVR assembler version 5.1 (C)2021 by DG4FAC
----------------------------------------------------------

Path:        /home/anonimo/Desktop/sis_embarcados/avr-projects/prova_1/
Source file: prova-1.asm
Hex file:    prova-1.hex
Eeprom file: prova-1.eep
Compiled:    09.08.2022, 14:11:05
Pass:        2

     1: .device ATMega328p
     2: 
     3: .dseg ; Data segment
     4: .org 0x100
     5: 
     6: .DEF LIST_END = R17
     7: .DEF POS_A = R18
     8: .DEF POS_B = R19
     9: .DEF CANDIDATE = R20
    10: 
    11: 
    12: .MACRO CFG_SRAM
    13:        LDI XL,0x00
    14:        LDI XH,0x01
    15: .ENDMACRO
    16: 
    17: .MACRO CFG_STACK
    18:      LDI R16,HIGH(RAMEND)
    19:      OUT SPH,R16
    20:      LDI R16,LOW(RAMEND)
    21:      OUT SPL,R16
    22: .ENDMACRO
    23: 
    24: ; Carrega SRAM com ARRAY (code mem)
    25: .MACRO FILL_FROM_CMEM
    26:          LDI R30,LOW(ARRAY<<1)
    27:          LDI R31,HIGH(ARRAY<<1)
    28:          LDI R16,0x00
    29:          LPM R1,Z+
    30:          ST X+,R1
    31:          INC R16
    32: LOAD_LOOP:
    33:           LPM R1,Z+
    34:           ST X+,R1
    35:           INC LIST_END
    36:           INC R16
    37:           CPI R16,INITIAL_ARRAY_SIZE
    38:           BRNE LOAD_LOOP
    39: .ENDMACRO
    40: 
    41: .cseg
    42: .org 0x00
    43: 000000   C000  rjmp INIT
    44: 
    45: INIT: CFG_SRAM
    45: 000001   E0A0  LDI XL,0x00
    45: 000002   E0B1  LDI XH,0x01
    46:       CFG_STACK
    46: 000003   E008  LDI R16,HIGH(RAMEND)
    46: 000004   BF0E  OUT SPH,R16
    46: 000005   EF0F  LDI R16,LOW(RAMEND)
    46: 000006   BF0D  OUT SPL,R16
    47:       FILL_FROM_CMEM
    47: 000007   E6E2  LDI R30,LOW(ARRAY<<1)
    47: 000008   E0F0  LDI R31,HIGH(ARRAY<<1)
    47: 000009   E000  LDI R16,0x00
    47: 00000A   9015  LPM R1,Z+
    47: 00000B   921D  ST X+,R1
    47: 00000C   9503  INC R16
    47: LOAD_LOOP:
    47: 00000D   9015  LPM R1,Z+
    47: 00000E   921D  ST X+,R1
    47: 00000F   9513  INC LIST_END
    47: 000010   9503  INC R16
    47: 000011   3003  CPI R16,INITIAL_ARRAY_SIZE
    47: 000012   F7D1  BRNE LOAD_LOOP
    48: 000013   940E  CALL ORDERLY_INSERT
        000014   0016
    49: 000015   C01A  RJMP LOOP
    50: 
    51: 
    52: ; Uses R16, POS_A, POS_B, CANDIDATE and calls CHANGE_POSITION
    53: ORDERLY_INSERT:
    54: 000016   E046  LDI CANDIDATE,0x06 ; Carrega valor no registrador candidato
    55: 000017   9513  INC LIST_END
    56: 000018   2FA1  MOV XL,LIST_END ; Carrega o final da lista
    57: 000019   2F21  MOV POS_A,LIST_END ; Salva a posição do valor inserido
    58: 00001A   934C  ST X,CANDIDATE ; Insere o valor no final da lista
    59: SWITCH_POS_LOOP:
    60: 00001B   910E  LD R16,-X ; Carrega o último valor da lista
    61: 00001C   2F3A  MOV POS_B,XL ; Salva a posição atual
    62: 00001D   1704  CP R16,CANDIDATE ; Compara se o último valor é igual ou maior
    63: 00001E   F488  BRSH LOOP ; Se for, termina
    64: 00001F   940E  CALL CHANGE_POSITION ; Senão, troca posição
        000020   0025
    65: 000021   2F23  MOV POS_A,POS_B ; Troca a posicao
    66: 000022   3020  CPI POS_A,0x00 ; Se a posição atual for 0, acaba.
    67: 000023   F061  BREQ LOOP
    68: 000024   CFF6  RJMP SWITCH_POS_LOOP ; Senão, reinicia
    69: 
    70: ; Uses POS_A, POS_B and R16
    71: CHANGE_POSITION:
    72: 000025   2FA2  MOV XL,POS_A ; Carrega POS_A
    73: 000026   910C  LD R16,X ; Carrega em R16 conteúdo de POS_A
    74: 000027   930F  PUSH R16 ; Bota conteúdo de POS_A no stack
    75: 000028   2FA3  MOV XL,POS_B ; Carrega POS_B
    76: 000029   910C  LD R16,X ; Carrega em R16 conteúdo de POS_B
    77: 00002A   2FA2  MOV XL,POS_A ; Carrega POS_A
    78: 00002B   930C  ST X,R16 ; Carrega conteúdo de R16 em POS_A
    79: 00002C   910F  POP R16 ; Tira conteúdo (original) de POS_A do stack
    80: 00002D   2FA3  MOV XL,POS_B ; Carrega POS_B
    81: 00002E   930C  ST X,R16 ; Carrega conteúdo de R16 em POS_B
    82: 00002F   9508  RET
    83: 
    84: 
    85: 000030   CFFF  RJMP LOOP
    86: 
    87: .equ INITIAL_ARRAY_SIZE = 3
    88: ARRAY: .db 4,1,0
 -> Warning 004: Number of bytes on line is odd, added 00 to fit program memory!
   File: /home/anonimo/Desktop/sis_embarcados/avr-projects/prova_1/prova-1.asm, Line: 88
   Source line: ARRAY: .db 4,1,0
        000031 0104 0000

List of symbols:
Type nDef nUsed             Decimalval           Hexval Name
  T     1     1                    171               AB ATMEGA328P
  L     1     2                      1               01 INIT
  L     1     2                     13               0D LOAD_LOOP@FILL_FROM_CMEM@1
  L     1     1                     22               16 ORDERLY_INSERT
  L     1     2                     27               1B SWITCH_POS_LOOP
  L     1     1                     37               25 CHANGE_POSITION
  L     1     8                     48               30 LOOP
  L     1     2                     49               31 ARRAY
  R     1     4                     17               11 LIST_END
  R     1     5                     18               12 POS_A
  R     1     4                     19               13 POS_B
  R     1     3                     20               14 CANDIDATE
  C     1     0                     22               16 NOW_Y
  C     1     0                      8               08 NOW_M
  C     1     0                      9               09 NOW_D
  C     1     0                  44782             AEEE NOW_I
  C     1     1                      3               03 INITIAL_ARRAY_SIZE

List of macros:
nLines nUsed nParams Name
     2     1       0 CFG_SRAM
     4     1       0 CFG_STACK
    13     1       0 FILL_FROM_CMEM

Program             :       49 words.
Constants           :        2 words.
Total program memory:       51 words.
Eeprom space        :        0 bytes.
Data segment        :        0 bytes.
Compilation completed, no errors.
Compilation ended 09.08.2022, 14:11:05
